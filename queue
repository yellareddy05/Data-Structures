#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//this what is going to be in the queue
typedef struct listitem {
    struct listitem *next; //pointer to the next item
    struct listitem *prev; //pointer to the preveous item
    int data;              // some data
}listitem_t;

//this is the queue 'header'
typedef struct
{
    struct listitem *first; //pointer to first item
    struct listitem *last;  //pointer to last item
}listhdr_t;

listhdr_t head;        // declare this statistically so that 'enqueue' and 'dequeue' can use it 

// this puts an item in at the end of the queue
void enqueue(listitem_t *item)
{
    listitem_t *temp;
    
    temp = head.last;      //get the 'last' item in the queue and keep hold of it
    head.last = item;     //put the item in the queue at the end 
    item->prev = temp;    // link back to old 'last' item
    item->next = (listitem_t*)&head;	// set the forward link of the new item
    temp->next = item;    // and finally set the forward link of the old last item to the new one
}

//this removes an item from the front of the queue - returns the item or NULL if there are no more items
listitem_t* dequeue()
{
    listitem_t *temp;
    
    temp = head.first;    //get the 'first' item
    if(temp == (listitem_t*)&head) // if the head of the queue points to itself
    {
        temp = NULL;        //...then the queue is empty
    }
    else {
        head.first = temp->next;   //and set the queue header to point to the 'second' item
        head.last->prev = (listitem_t*)&head;
    }
        return temp;
}
int main()
{
    listitem_t *temp;
    //first make an empty queue
    //...which is a queue where the header points to itself and there are no items in it 
    head.first = (listitem_t*)&head;
    head.last = (listitem_t*)&head;
    
    for(int i=0;i<3;i++)   //as before, populate the queue
    {
        temp = malloc(sizeof(listitem_t)); //allocate some memory for the new queue items
        temp->data = i; //set the items data to the loop count so that we can see
        enqueue(temp);  // and put it in the queue
        
    }
    
    printf("first item = %d\n",head.first->data);
    printf("last item = %d\n",head.last->data);
    
    //now lets dequeue from the end of the queue
    do{
        temp = dequeue();  //keep going untill the queue is empty
        if(temp!=NULL)   //if the queue is empty we will get NULL returned
        {
            printf("data is %d\n", temp->data);
			free(temp);				// call 'free' to tidy up 
		}
	} while (temp != NULL);

	return 0;
}
